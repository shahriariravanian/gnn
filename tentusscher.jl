# this file is auto-generated by CellMLToolkit (https://github.com/SciML/CellMLToolkit.jl)
# 2020 Shahriar Iravanian (siravan@svtsim.com)

ùêª(x) = (x >= zero(x) ? one(x) : zero(x))

# initial conditions
u0 = [0.0002, 0.0, 0.0, -86.2, 1.0, 0.0, 0.0, 1.0, 1.0, 138.3, 0.75, 1.0, 1.0, 0.75, 0.2, 0.0, 11.6]

# parameters
p = [10.0, 0.0146, 0.00029, 40.0, 0.25, 0.062, 0.0005, 0.096, 140.0, 0.00025, 0.825, 2.5, 52.0, 8.0e-5, 0.15, 0.000175, 96485.3415, 310.0, 0.03, 0.000592, 1.38, 0.008232, 0.3, 87.5, 0.1, 0.016464, 2.0, 0.185, 0.294, 1.362, 5.405, 1.0, 1.0, 2.0, 1000.0, 0.001094, 0.016404, 5.4, 0.001, 10.0, 14.838, 0.000425, 1000.0, 8314.472, 0.35]

function f!(du‚Çö, u‚Çö, p‚Çö, t‚Çö)
	time = t‚Çö

	# state variables:
	Ca_i = u‚Çö[1]
	r = u‚Çö[2]
	d = u‚Çö[3]
	V = u‚Çö[4]
	fCa = u‚Çö[5]
	Xs = u‚Çö[6]
	m = u‚Çö[7]
	f = u‚Çö[8]
	g = u‚Çö[9]
	K_i = u‚Çö[10]
	h = u‚Çö[11]
	s = u‚Çö[12]
	Xr2 = u‚Çö[13]
	j = u‚Çö[14]
	Ca_SR = u‚Çö[15]
	Xr1 = u‚Çö[16]
	Na_i = u‚Çö[17]

	# parameters:
	stim_start = p‚Çö[1]
	g_pK = p‚Çö[2]
	g_bna = p‚Çö[3]
	K_mNa = p‚Çö[4]
	b_rel = p‚Çö[5]
	g_Ks = p‚Çö[6]
	K_pCa = p‚Çö[7]
	g_Kr = p‚Çö[8]
	Na_o = p‚Çö[9]
	K_up = p‚Çö[10]
	g_pCa = p‚Çö[11]
	alpha = p‚Çö[12]
	stim_amplitude = p‚Çö[13]
	V_leak = p‚Çö[14]
	Buf_c = p‚Çö[15]
	g_CaL = p‚Çö[16]
	F = p‚Çö[17]
	T = p‚Çö[18]
	P_kna = p‚Çö[19]
	g_bca = p‚Çö[20]
	Km_Ca = p‚Çö[21]
	c_rel = p‚Çö[22]
	K_buf_sr = p‚Çö[23]
	Km_Nai = p‚Çö[24]
	K_sat = p‚Çö[25]
	a_rel = p‚Çö[26]
	tau_g = p‚Çö[27]
	Cm = p‚Çö[28]
	g_to = p‚Çö[29]
	P_NaK = p‚Çö[30]
	g_K1 = p‚Çö[31]
	stim_duration = p‚Çö[32]
	K_mk = p‚Çö[33]
	Ca_o = p‚Çö[34]
	stim_period = p‚Çö[35]
	V_sr = p‚Çö[36]
	V_c = p‚Çö[37]
	K_o = p‚Çö[38]
	K_buf_c = p‚Çö[39]
	Buf_sr = p‚Çö[40]
	g_Na = p‚Çö[41]
	Vmax_up = p‚Çö[42]
	K_NaCa = p‚Çö[43]
	R = p‚Çö[44]
	gamma = p‚Çö[45]

	# algebraic equations:
	i_Stim = (ùêª((time - floor(time / stim_period) * stim_period) - stim_start) * ùêª((stim_start + stim_duration) - (time - floor(time / stim_period) * stim_period))) * -stim_amplitude
	E_Na = ((R * T) / F) * log(Na_o / Na_i)
	E_K = ((R * T) / F) * log(K_o / K_i)
	E_Ks = ((R * T) / F) * log((K_o + P_kna * Na_o) / (K_i + P_kna * Na_i))
	E_Ca = ((0.5 * (R * T)) / F) * log(Ca_o / Ca_i)
	alpha_K1 = 0.1 / (1.0 + exp(((V - E_K) - 200.0) * 0.06))
	beta_K1 = (exp(((V - E_K) + 100.0) * 0.0002) * 3.0 + exp(((V - E_K) - 10.0) * 0.1)) / (1.0 + exp((V - E_K) * -0.5))
	xK1_inf = alpha_K1 / (alpha_K1 + beta_K1)
	i_K1 = g_K1 * (xK1_inf * (sqrt(K_o / 5.4) * (V - E_K)))
	i_Kr = g_Kr * (sqrt(K_o / 5.4) * (Xr1 * (Xr2 * (V - E_K))))
	xr1_inf = 1.0 / (1.0 + exp((-26.0 - V) / 7.0))
	alpha_xr1 = 450.0 / (1.0 + exp((-45.0 - V) / 10.0))
	beta_xr1 = 6.0 / (1.0 + exp((V + 30.0) / 11.5))
	tau_xr1 = alpha_xr1 * beta_xr1
	xr2_inf = 1.0 / (1.0 + exp((V + 88.0) / 24.0))
	alpha_xr2 = 3.0 / (1.0 + exp((-60.0 - V) / 20.0))
	beta_xr2 = 1.12 / (1.0 + exp((V - 60.0) / 20.0))
	tau_xr2 = alpha_xr2 * beta_xr2
	i_Ks = g_Ks * (Xs ^ 2.0 * (V - E_Ks))
	xs_inf = 1.0 / (1.0 + exp((-5.0 - V) / 14.0))
	alpha_xs = 1100.0 / sqrt(1.0 + exp((-10.0 - V) / 6.0))
	beta_xs = 1.0 / (1.0 + exp((V - 60.0) / 20.0))
	tau_xs = alpha_xs * beta_xs
	i_Na = g_Na * (m ^ 3.0 * (h * (j * (V - E_Na))))
	m_inf = 1.0 / (1.0 + exp((-56.86 - V) / 9.03)) ^ 2.0
	alpha_m = 1.0 / (1.0 + exp((-60.0 - V) / 5.0))
	beta_m = 0.1 / (1.0 + exp((V + 35.0) / 5.0)) + 0.1 / (1.0 + exp((V - 50.0) / 200.0))
	tau_m = alpha_m * beta_m
	h_inf = 1.0 / (1.0 + exp((V + 71.55) / 7.43)) ^ 2.0
	alpha_h = ùêª((-40.0 - V) - 2.220446049250313e-16) * (exp(-((V + 80.0)) / 6.8) * 0.057)
	beta_h = ùêª((-40.0 - V) - 2.220446049250313e-16) * (exp(V * 0.079) * 2.7 + exp(V * 0.3485) * 310000.0) + (1 - ùêª((-40.0 - V) - 2.220446049250313e-16)) * (0.77 / ((1.0 + exp((V + 10.66) / -11.1)) * 0.13))
	tau_h = 1.0 / (alpha_h + beta_h)
	j_inf = 1.0 / (1.0 + exp((V + 71.55) / 7.43)) ^ 2.0
	alpha_j = ùêª((-40.0 - V) - 2.220446049250313e-16) * (((exp(V * 0.2444) * -25428.0 - exp(V * -0.04391) * 6.948e-6) * (V + 37.78)) / (1.0 + exp((V + 79.23) * 0.311)))
	beta_j = ùêª((-40.0 - V) - 2.220446049250313e-16) * ((exp(V * -0.01052) * 0.02424) / (1.0 + exp((V + 40.14) * -0.1378))) + (1 - ùêª((-40.0 - V) - 2.220446049250313e-16)) * ((exp(V * 0.057) * 0.6) / (1.0 + exp((V + 32.0) * -0.1)))
	tau_j = 1.0 / (alpha_j + beta_j)
	i_b_Na = g_bna * (V - E_Na)
	i_CaL = (((g_CaL * (d * (f * (fCa * (4.0 * (V * F ^ 2.0)))))) / (R * T)) * (Ca_i * exp((2.0 * (V * F)) / (R * T)) - Ca_o * 0.341)) / (exp((2.0 * (V * F)) / (R * T)) - 1.0)
	d_inf = 1.0 / (1.0 + exp((-5.0 - V) / 7.5))
	alpha_d = 1.4 / (1.0 + exp((-35.0 - V) / 13.0)) + 0.25
	beta_d = 1.4 / (1.0 + exp((V + 5.0) / 5.0))
	gamma_d = 1.0 / (1.0 + exp((50.0 - V) / 20.0))
	tau_d = alpha_d * beta_d + gamma_d
	f_inf = 1.0 / (1.0 + exp((V + 20.0) / 7.0))
	tau_f = exp(-((V + 27.0) ^ 2.0) / 240.0) * 1125.0 + (80.0 + 165.0 / (1.0 + exp((25.0 - V) / 10.0)))
	alpha_fCa = 1.0 / (1.0 + (Ca_i / 0.000325) ^ 8.0)
	beta_fCa = 0.1 / (1.0 + exp((Ca_i - 0.0005) / 0.0001))
	gama_fCa = 0.2 / (1.0 + exp((Ca_i - 0.00075) / 0.0008))
	fCa_inf = (alpha_fCa + (beta_fCa + (gama_fCa + 0.23))) / 1.46
	tau_fCa = 2.0
	d_fCa = (fCa_inf - fCa) / tau_fCa
	i_b_Ca = g_bca * (V - E_Ca)
	i_to = g_to * (r * (s * (V - E_K)))
	s_inf = 1.0 / (1.0 + exp((V + 20.0) / 5.0))
	tau_s = exp(-((V + 45.0) ^ 2.0) / 320.0) * 85.0 + (5.0 / (1.0 + exp((V - 20.0) / 5.0)) + 3.0)
	r_inf = 1.0 / (1.0 + exp((20.0 - V) / 6.0))
	tau_r = exp(-((V + 40.0) ^ 2.0) / 1800.0) * 9.5 + 0.8
	i_NaK = ((((P_NaK * K_o) / (K_o + K_mk)) * Na_i) / (Na_i + K_mNa)) / (1.0 + (exp((-0.1 * (V * F)) / (R * T)) * 0.1245 + exp((-V * F) / (R * T)) * 0.0353))
	i_NaCa = (K_NaCa * (exp((gamma * (V * F)) / (R * T)) * (Na_i ^ 3.0 * Ca_o) - exp(((gamma - 1.0) * (V * F)) / (R * T)) * (Na_o ^ 3.0 * (Ca_i * alpha)))) / ((Km_Nai ^ 3.0 + Na_o ^ 3.0) * ((Km_Ca + Ca_o) * (1.0 + K_sat * exp(((gamma - 1.0) * (V * F)) / (R * T)))))
	i_p_Ca = (g_pCa * Ca_i) / (Ca_i + K_pCa)
	i_p_K = (g_pK * (V - E_K)) / (1.0 + exp((25.0 - V) / 5.98))
	i_rel = ((a_rel * Ca_SR ^ 2.0) / (b_rel ^ 2.0 + Ca_SR ^ 2.0) + c_rel) * (d * g)
	i_up = Vmax_up / (1.0 + K_up ^ 2.0 / Ca_i ^ 2.0)
	i_leak = V_leak * (Ca_SR - Ca_i)
	g_inf = ùêª((0.00035 - Ca_i) - 2.220446049250313e-16) * (1.0 / (1.0 + (Ca_i / 0.00035) ^ 6.0)) + (1 - ùêª((0.00035 - Ca_i) - 2.220446049250313e-16)) * (1.0 / (1.0 + (Ca_i / 0.00035) ^ 16.0))
	d_g = (g_inf - g) / tau_g
	Ca_i_bufc = 1.0 / (1.0 + (Buf_c * K_buf_c) / (Ca_i + K_buf_c) ^ 2.0)
	Ca_sr_bufsr = 1.0 / (1.0 + (Buf_sr * K_buf_sr) / (Ca_SR + K_buf_sr) ^ 2.0)

	# system of ODEs:
	‚àÇV = -((i_K1 + (i_to + (i_Kr + (i_Ks + (i_CaL + (i_NaK + (i_Na + (i_b_Na + (i_NaCa + (i_b_Ca + (i_p_K + (i_p_Ca + i_Stim)))))))))))))
	‚àÇXr1 = (xr1_inf - Xr1) / tau_xr1
	‚àÇXr2 = (xr2_inf - Xr2) / tau_xr2
	‚àÇXs = (xs_inf - Xs) / tau_xs
	‚àÇm = (m_inf - m) / tau_m
	‚àÇh = (h_inf - h) / tau_h
	‚àÇj = (j_inf - j) / tau_j
	‚àÇd = (d_inf - d) / tau_d
	‚àÇf = (f_inf - f) / tau_f
	‚àÇfCa = (1 - ùêª((fCa_inf - fCa) - 2.220446049250313e-16) * ùêª((V - -60.0) - 2.220446049250313e-16)) * d_fCa
	‚àÇs = (s_inf - s) / tau_s
	‚àÇr = (r_inf - r) / tau_r
	‚àÇg = (1 - ùêª((g_inf - g) - 2.220446049250313e-16) * ùêª((V - -60.0) - 2.220446049250313e-16)) * d_g
	‚àÇCa_i = Ca_i_bufc * (((i_leak - i_up) + i_rel) - (((i_CaL + (i_b_Ca + i_p_Ca)) - i_NaCa * 2.0) / (2.0 * (V_c * F))) * Cm)
	‚àÇCa_SR = ((Ca_sr_bufsr * V_c) / V_sr) * (i_up - (i_rel + i_leak))
	‚àÇNa_i = -((i_Na + (i_b_Na + (i_NaK * 3.0 + i_NaCa * 3.0))) * Cm) / (V_c * F)
	‚àÇK_i = -(((i_K1 + (i_to + (i_Kr + (i_Ks + (i_p_K + i_Stim))))) - i_NaK * 2.0) * Cm) / (V_c * F)

	# state variables:
	du‚Çö[1] = ‚àÇCa_i
	du‚Çö[2] = ‚àÇr
	du‚Çö[3] = ‚àÇd
	du‚Çö[4] = ‚àÇV
	du‚Çö[5] = ‚àÇfCa
	du‚Çö[6] = ‚àÇXs
	du‚Çö[7] = ‚àÇm
	du‚Çö[8] = ‚àÇf
	du‚Çö[9] = ‚àÇg
	du‚Çö[10] = ‚àÇK_i
	du‚Çö[11] = ‚àÇh
	du‚Çö[12] = ‚àÇs
	du‚Çö[13] = ‚àÇXr2
	du‚Çö[14] = ‚àÇj
	du‚Çö[15] = ‚àÇCa_SR
	du‚Çö[16] = ‚àÇXr1
	du‚Çö[17] = ‚àÇNa_i
	nothing
end

